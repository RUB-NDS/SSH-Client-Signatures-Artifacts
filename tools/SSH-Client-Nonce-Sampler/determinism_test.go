package main

import (
	"crypto"
	"crypto/dsa"
	"crypto/ecdsa"
	"crypto/elliptic"
	"math/big"
	"reflect"
	"testing"
)

func parseBigInt(s string) *big.Int {
	i, _ := new(big.Int).SetString(s, 16)
	return i
}

func TestRfc6979Dsa(t *testing.T) {
	type args struct {
		hash       crypto.Hash
		privKey    *dsa.PrivateKey
		signedData []byte
	}
	tests := []struct {
		name string
		args args
		want *big.Int
	}{
		// A.2.1. DSA, 1024 Bits
		{
			name: "RFC6979 A.2.1. DSA, 1024 Bits, SHA-1, message = \"sample\"",
			args: args{
				hash: crypto.SHA1,
				privKey: &dsa.PrivateKey{
					PublicKey: dsa.PublicKey{
						Parameters: dsa.Parameters{
							P: parseBigInt("86F5CA03DCFEB225063FF830A0C769B9DD9D6153AD91D7CE27F787C43278B447E6533B86B18BED6E8A48B784A14C252C5BE0DBF60B86D6385BD2F12FB763ED8873ABFD3F5BA2E0A8C0A59082EAC056935E529DAF7C610467899C77ADEDFC846C881870B7B19B2B58F9BE0521A17002E3BDD6B86685EE90B3D9A1B02B782B1779"),
							Q: parseBigInt("996F967F6C8E388D9E28D01E205FBA957A5698B1"),
							G: parseBigInt("07B0F92546150B62514BB771E2A0C0CE387F03BDA6C56B505209FF25FD3C133D89BBCD97E904E09114D9A7DEFDEADFC9078EA544D2E401AEECC40BB9FBBF78FD87995A10A1C27CB7789B594BA7EFB5C4326A9FE59A070E136DB77175464ADCA417BE5DCE2F40D10A46A3A3943F26AB7FD9C0398FF8C76EE0A56826A8A88F1DBD"),
						},
						Y: parseBigInt("5DF5E01DED31D0297E274E1691C192FE5868FEF9E19A84776454B100CF16F65392195A38B90523E2542EE61871C0440CB87C322FC4B4D2EC5E1E7EC766E1BE8D4CE935437DC11C3C8FD426338933EBFE739CB3465F4D3668C5E473508253B1E682F65CBDC4FAE93C2EA212390E54905A86E2223170B44EAA7DA5DD9FFCFB7F3B"),
					},
					X: parseBigInt("411602CB19A6CCC34494D79D98EF1E7ED5AF25F7"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("7BDB6B0FF756E1BB5D53583EF979082F9AD5BD5B"),
		},
		{
			name: "RFC6979 A.2.1. DSA, 1024 Bits, SHA-224, message = \"sample\"",
			args: args{
				hash: crypto.SHA224,
				privKey: &dsa.PrivateKey{
					PublicKey: dsa.PublicKey{
						Parameters: dsa.Parameters{
							P: parseBigInt("86F5CA03DCFEB225063FF830A0C769B9DD9D6153AD91D7CE27F787C43278B447E6533B86B18BED6E8A48B784A14C252C5BE0DBF60B86D6385BD2F12FB763ED8873ABFD3F5BA2E0A8C0A59082EAC056935E529DAF7C610467899C77ADEDFC846C881870B7B19B2B58F9BE0521A17002E3BDD6B86685EE90B3D9A1B02B782B1779"),
							Q: parseBigInt("996F967F6C8E388D9E28D01E205FBA957A5698B1"),
							G: parseBigInt("07B0F92546150B62514BB771E2A0C0CE387F03BDA6C56B505209FF25FD3C133D89BBCD97E904E09114D9A7DEFDEADFC9078EA544D2E401AEECC40BB9FBBF78FD87995A10A1C27CB7789B594BA7EFB5C4326A9FE59A070E136DB77175464ADCA417BE5DCE2F40D10A46A3A3943F26AB7FD9C0398FF8C76EE0A56826A8A88F1DBD"),
						},
						Y: parseBigInt("5DF5E01DED31D0297E274E1691C192FE5868FEF9E19A84776454B100CF16F65392195A38B90523E2542EE61871C0440CB87C322FC4B4D2EC5E1E7EC766E1BE8D4CE935437DC11C3C8FD426338933EBFE739CB3465F4D3668C5E473508253B1E682F65CBDC4FAE93C2EA212390E54905A86E2223170B44EAA7DA5DD9FFCFB7F3B"),
					},
					X: parseBigInt("411602CB19A6CCC34494D79D98EF1E7ED5AF25F7"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("562097C06782D60C3037BA7BE104774344687649"),
		},
		{
			name: "RFC6979 A.2.1. DSA, 1024 Bits, SHA-256, message = \"sample\"",
			args: args{
				hash: crypto.SHA256,
				privKey: &dsa.PrivateKey{
					PublicKey: dsa.PublicKey{
						Parameters: dsa.Parameters{
							P: parseBigInt("86F5CA03DCFEB225063FF830A0C769B9DD9D6153AD91D7CE27F787C43278B447E6533B86B18BED6E8A48B784A14C252C5BE0DBF60B86D6385BD2F12FB763ED8873ABFD3F5BA2E0A8C0A59082EAC056935E529DAF7C610467899C77ADEDFC846C881870B7B19B2B58F9BE0521A17002E3BDD6B86685EE90B3D9A1B02B782B1779"),
							Q: parseBigInt("996F967F6C8E388D9E28D01E205FBA957A5698B1"),
							G: parseBigInt("07B0F92546150B62514BB771E2A0C0CE387F03BDA6C56B505209FF25FD3C133D89BBCD97E904E09114D9A7DEFDEADFC9078EA544D2E401AEECC40BB9FBBF78FD87995A10A1C27CB7789B594BA7EFB5C4326A9FE59A070E136DB77175464ADCA417BE5DCE2F40D10A46A3A3943F26AB7FD9C0398FF8C76EE0A56826A8A88F1DBD"),
						},
						Y: parseBigInt("5DF5E01DED31D0297E274E1691C192FE5868FEF9E19A84776454B100CF16F65392195A38B90523E2542EE61871C0440CB87C322FC4B4D2EC5E1E7EC766E1BE8D4CE935437DC11C3C8FD426338933EBFE739CB3465F4D3668C5E473508253B1E682F65CBDC4FAE93C2EA212390E54905A86E2223170B44EAA7DA5DD9FFCFB7F3B"),
					},
					X: parseBigInt("411602CB19A6CCC34494D79D98EF1E7ED5AF25F7"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("519BA0546D0C39202A7D34D7DFA5E760B318BCFB"),
		},
		{
			name: "RFC6979 A.2.1. DSA, 1024 Bits, SHA-384, message = \"sample\"",
			args: args{
				hash: crypto.SHA384,
				privKey: &dsa.PrivateKey{
					PublicKey: dsa.PublicKey{
						Parameters: dsa.Parameters{
							P: parseBigInt("86F5CA03DCFEB225063FF830A0C769B9DD9D6153AD91D7CE27F787C43278B447E6533B86B18BED6E8A48B784A14C252C5BE0DBF60B86D6385BD2F12FB763ED8873ABFD3F5BA2E0A8C0A59082EAC056935E529DAF7C610467899C77ADEDFC846C881870B7B19B2B58F9BE0521A17002E3BDD6B86685EE90B3D9A1B02B782B1779"),
							Q: parseBigInt("996F967F6C8E388D9E28D01E205FBA957A5698B1"),
							G: parseBigInt("07B0F92546150B62514BB771E2A0C0CE387F03BDA6C56B505209FF25FD3C133D89BBCD97E904E09114D9A7DEFDEADFC9078EA544D2E401AEECC40BB9FBBF78FD87995A10A1C27CB7789B594BA7EFB5C4326A9FE59A070E136DB77175464ADCA417BE5DCE2F40D10A46A3A3943F26AB7FD9C0398FF8C76EE0A56826A8A88F1DBD"),
						},
						Y: parseBigInt("5DF5E01DED31D0297E274E1691C192FE5868FEF9E19A84776454B100CF16F65392195A38B90523E2542EE61871C0440CB87C322FC4B4D2EC5E1E7EC766E1BE8D4CE935437DC11C3C8FD426338933EBFE739CB3465F4D3668C5E473508253B1E682F65CBDC4FAE93C2EA212390E54905A86E2223170B44EAA7DA5DD9FFCFB7F3B"),
					},
					X: parseBigInt("411602CB19A6CCC34494D79D98EF1E7ED5AF25F7"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("95897CD7BBB944AA932DBC579C1C09EB6FCFC595"),
		},
		{
			name: "RFC6979 A.2.1. DSA, 1024 Bits, SHA-512, message = \"sample\"",
			args: args{
				hash: crypto.SHA512,
				privKey: &dsa.PrivateKey{
					PublicKey: dsa.PublicKey{
						Parameters: dsa.Parameters{
							P: parseBigInt("86F5CA03DCFEB225063FF830A0C769B9DD9D6153AD91D7CE27F787C43278B447E6533B86B18BED6E8A48B784A14C252C5BE0DBF60B86D6385BD2F12FB763ED8873ABFD3F5BA2E0A8C0A59082EAC056935E529DAF7C610467899C77ADEDFC846C881870B7B19B2B58F9BE0521A17002E3BDD6B86685EE90B3D9A1B02B782B1779"),
							Q: parseBigInt("996F967F6C8E388D9E28D01E205FBA957A5698B1"),
							G: parseBigInt("07B0F92546150B62514BB771E2A0C0CE387F03BDA6C56B505209FF25FD3C133D89BBCD97E904E09114D9A7DEFDEADFC9078EA544D2E401AEECC40BB9FBBF78FD87995A10A1C27CB7789B594BA7EFB5C4326A9FE59A070E136DB77175464ADCA417BE5DCE2F40D10A46A3A3943F26AB7FD9C0398FF8C76EE0A56826A8A88F1DBD"),
						},
						Y: parseBigInt("5DF5E01DED31D0297E274E1691C192FE5868FEF9E19A84776454B100CF16F65392195A38B90523E2542EE61871C0440CB87C322FC4B4D2EC5E1E7EC766E1BE8D4CE935437DC11C3C8FD426338933EBFE739CB3465F4D3668C5E473508253B1E682F65CBDC4FAE93C2EA212390E54905A86E2223170B44EAA7DA5DD9FFCFB7F3B"),
					},
					X: parseBigInt("411602CB19A6CCC34494D79D98EF1E7ED5AF25F7"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("09ECE7CA27D0F5A4DD4E556C9DF1D21D28104F8B"),
		},
		{
			name: "RFC6979 A.2.1. DSA, 1024 Bits, SHA-1, message = \"test\"",
			args: args{
				hash: crypto.SHA1,
				privKey: &dsa.PrivateKey{
					PublicKey: dsa.PublicKey{
						Parameters: dsa.Parameters{
							P: parseBigInt("86F5CA03DCFEB225063FF830A0C769B9DD9D6153AD91D7CE27F787C43278B447E6533B86B18BED6E8A48B784A14C252C5BE0DBF60B86D6385BD2F12FB763ED8873ABFD3F5BA2E0A8C0A59082EAC056935E529DAF7C610467899C77ADEDFC846C881870B7B19B2B58F9BE0521A17002E3BDD6B86685EE90B3D9A1B02B782B1779"),
							Q: parseBigInt("996F967F6C8E388D9E28D01E205FBA957A5698B1"),
							G: parseBigInt("07B0F92546150B62514BB771E2A0C0CE387F03BDA6C56B505209FF25FD3C133D89BBCD97E904E09114D9A7DEFDEADFC9078EA544D2E401AEECC40BB9FBBF78FD87995A10A1C27CB7789B594BA7EFB5C4326A9FE59A070E136DB77175464ADCA417BE5DCE2F40D10A46A3A3943F26AB7FD9C0398FF8C76EE0A56826A8A88F1DBD"),
						},
						Y: parseBigInt("5DF5E01DED31D0297E274E1691C192FE5868FEF9E19A84776454B100CF16F65392195A38B90523E2542EE61871C0440CB87C322FC4B4D2EC5E1E7EC766E1BE8D4CE935437DC11C3C8FD426338933EBFE739CB3465F4D3668C5E473508253B1E682F65CBDC4FAE93C2EA212390E54905A86E2223170B44EAA7DA5DD9FFCFB7F3B"),
					},
					X: parseBigInt("411602CB19A6CCC34494D79D98EF1E7ED5AF25F7"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("5C842DF4F9E344EE09F056838B42C7A17F4A6433"),
		},
		{
			name: "RFC6979 A.2.1. DSA, 1024 Bits, SHA-224, message = \"test\"",
			args: args{
				hash: crypto.SHA224,
				privKey: &dsa.PrivateKey{
					PublicKey: dsa.PublicKey{
						Parameters: dsa.Parameters{
							P: parseBigInt("86F5CA03DCFEB225063FF830A0C769B9DD9D6153AD91D7CE27F787C43278B447E6533B86B18BED6E8A48B784A14C252C5BE0DBF60B86D6385BD2F12FB763ED8873ABFD3F5BA2E0A8C0A59082EAC056935E529DAF7C610467899C77ADEDFC846C881870B7B19B2B58F9BE0521A17002E3BDD6B86685EE90B3D9A1B02B782B1779"),
							Q: parseBigInt("996F967F6C8E388D9E28D01E205FBA957A5698B1"),
							G: parseBigInt("07B0F92546150B62514BB771E2A0C0CE387F03BDA6C56B505209FF25FD3C133D89BBCD97E904E09114D9A7DEFDEADFC9078EA544D2E401AEECC40BB9FBBF78FD87995A10A1C27CB7789B594BA7EFB5C4326A9FE59A070E136DB77175464ADCA417BE5DCE2F40D10A46A3A3943F26AB7FD9C0398FF8C76EE0A56826A8A88F1DBD"),
						},
						Y: parseBigInt("5DF5E01DED31D0297E274E1691C192FE5868FEF9E19A84776454B100CF16F65392195A38B90523E2542EE61871C0440CB87C322FC4B4D2EC5E1E7EC766E1BE8D4CE935437DC11C3C8FD426338933EBFE739CB3465F4D3668C5E473508253B1E682F65CBDC4FAE93C2EA212390E54905A86E2223170B44EAA7DA5DD9FFCFB7F3B"),
					},
					X: parseBigInt("411602CB19A6CCC34494D79D98EF1E7ED5AF25F7"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("4598B8EFC1A53BC8AECD58D1ABBB0C0C71E67297"),
		},
		{
			name: "RFC6979 A.2.1. DSA, 1024 Bits, SHA-256, message = \"test\"",
			args: args{
				hash: crypto.SHA256,
				privKey: &dsa.PrivateKey{
					PublicKey: dsa.PublicKey{
						Parameters: dsa.Parameters{
							P: parseBigInt("86F5CA03DCFEB225063FF830A0C769B9DD9D6153AD91D7CE27F787C43278B447E6533B86B18BED6E8A48B784A14C252C5BE0DBF60B86D6385BD2F12FB763ED8873ABFD3F5BA2E0A8C0A59082EAC056935E529DAF7C610467899C77ADEDFC846C881870B7B19B2B58F9BE0521A17002E3BDD6B86685EE90B3D9A1B02B782B1779"),
							Q: parseBigInt("996F967F6C8E388D9E28D01E205FBA957A5698B1"),
							G: parseBigInt("07B0F92546150B62514BB771E2A0C0CE387F03BDA6C56B505209FF25FD3C133D89BBCD97E904E09114D9A7DEFDEADFC9078EA544D2E401AEECC40BB9FBBF78FD87995A10A1C27CB7789B594BA7EFB5C4326A9FE59A070E136DB77175464ADCA417BE5DCE2F40D10A46A3A3943F26AB7FD9C0398FF8C76EE0A56826A8A88F1DBD"),
						},
						Y: parseBigInt("5DF5E01DED31D0297E274E1691C192FE5868FEF9E19A84776454B100CF16F65392195A38B90523E2542EE61871C0440CB87C322FC4B4D2EC5E1E7EC766E1BE8D4CE935437DC11C3C8FD426338933EBFE739CB3465F4D3668C5E473508253B1E682F65CBDC4FAE93C2EA212390E54905A86E2223170B44EAA7DA5DD9FFCFB7F3B"),
					},
					X: parseBigInt("411602CB19A6CCC34494D79D98EF1E7ED5AF25F7"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("5A67592E8128E03A417B0484410FB72C0B630E1A"),
		},
		{
			name: "RFC6979 A.2.1. DSA, 1024 Bits, SHA-384, message = \"test\"",
			args: args{
				hash: crypto.SHA384,
				privKey: &dsa.PrivateKey{
					PublicKey: dsa.PublicKey{
						Parameters: dsa.Parameters{
							P: parseBigInt("86F5CA03DCFEB225063FF830A0C769B9DD9D6153AD91D7CE27F787C43278B447E6533B86B18BED6E8A48B784A14C252C5BE0DBF60B86D6385BD2F12FB763ED8873ABFD3F5BA2E0A8C0A59082EAC056935E529DAF7C610467899C77ADEDFC846C881870B7B19B2B58F9BE0521A17002E3BDD6B86685EE90B3D9A1B02B782B1779"),
							Q: parseBigInt("996F967F6C8E388D9E28D01E205FBA957A5698B1"),
							G: parseBigInt("07B0F92546150B62514BB771E2A0C0CE387F03BDA6C56B505209FF25FD3C133D89BBCD97E904E09114D9A7DEFDEADFC9078EA544D2E401AEECC40BB9FBBF78FD87995A10A1C27CB7789B594BA7EFB5C4326A9FE59A070E136DB77175464ADCA417BE5DCE2F40D10A46A3A3943F26AB7FD9C0398FF8C76EE0A56826A8A88F1DBD"),
						},
						Y: parseBigInt("5DF5E01DED31D0297E274E1691C192FE5868FEF9E19A84776454B100CF16F65392195A38B90523E2542EE61871C0440CB87C322FC4B4D2EC5E1E7EC766E1BE8D4CE935437DC11C3C8FD426338933EBFE739CB3465F4D3668C5E473508253B1E682F65CBDC4FAE93C2EA212390E54905A86E2223170B44EAA7DA5DD9FFCFB7F3B"),
					},
					X: parseBigInt("411602CB19A6CCC34494D79D98EF1E7ED5AF25F7"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("220156B761F6CA5E6C9F1B9CF9C24BE25F98CD89"),
		},
		{
			name: "RFC6979 A.2.1. DSA, 1024 Bits, SHA-512, message = \"test\"",
			args: args{
				hash: crypto.SHA512,
				privKey: &dsa.PrivateKey{
					PublicKey: dsa.PublicKey{
						Parameters: dsa.Parameters{
							P: parseBigInt("86F5CA03DCFEB225063FF830A0C769B9DD9D6153AD91D7CE27F787C43278B447E6533B86B18BED6E8A48B784A14C252C5BE0DBF60B86D6385BD2F12FB763ED8873ABFD3F5BA2E0A8C0A59082EAC056935E529DAF7C610467899C77ADEDFC846C881870B7B19B2B58F9BE0521A17002E3BDD6B86685EE90B3D9A1B02B782B1779"),
							Q: parseBigInt("996F967F6C8E388D9E28D01E205FBA957A5698B1"),
							G: parseBigInt("07B0F92546150B62514BB771E2A0C0CE387F03BDA6C56B505209FF25FD3C133D89BBCD97E904E09114D9A7DEFDEADFC9078EA544D2E401AEECC40BB9FBBF78FD87995A10A1C27CB7789B594BA7EFB5C4326A9FE59A070E136DB77175464ADCA417BE5DCE2F40D10A46A3A3943F26AB7FD9C0398FF8C76EE0A56826A8A88F1DBD"),
						},
						Y: parseBigInt("5DF5E01DED31D0297E274E1691C192FE5868FEF9E19A84776454B100CF16F65392195A38B90523E2542EE61871C0440CB87C322FC4B4D2EC5E1E7EC766E1BE8D4CE935437DC11C3C8FD426338933EBFE739CB3465F4D3668C5E473508253B1E682F65CBDC4FAE93C2EA212390E54905A86E2223170B44EAA7DA5DD9FFCFB7F3B"),
					},
					X: parseBigInt("411602CB19A6CCC34494D79D98EF1E7ED5AF25F7"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("65D2C2EEB175E370F28C75BFCDC028D22C7DBE9C"),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := rfc6979Dsa(tt.args.hash, tt.args.privKey, tt.args.signedData, false); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("rfc6979() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestRfc6979Ecdsa(t *testing.T) {
	type args struct {
		hash       crypto.Hash
		privKey    *ecdsa.PrivateKey
		signedData []byte
	}
	tests := []struct {
		name string
		args args
		want *big.Int
	}{
		// A.2.5. ECDSA, 256 Bits (Prime Field)
		{
			name: "RFC6979 A.2.5. ECDSA, 256 Bits (Prime Field), SHA-1, message = \"sample\"",
			args: args{
				hash: crypto.SHA1,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P256(),
						X:     parseBigInt("60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6"),
						Y:     parseBigInt("7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299"),
					},
					D: parseBigInt("C9AFA9D845BA75166B5C215767B1D6934E50C3DB36E89B127B8A622B120F6721"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("882905F1227FD620FBF2ABF21244F0BA83D0DC3A9103DBBEE43A1FB858109DB4"),
		},
		{
			name: "RFC6979 A.2.5. ECDSA, 256 Bits (Prime Field), SHA-224, message = \"sample\"",
			args: args{
				hash: crypto.SHA224,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P256(),
						X:     parseBigInt("60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6"),
						Y:     parseBigInt("7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299"),
					},
					D: parseBigInt("C9AFA9D845BA75166B5C215767B1D6934E50C3DB36E89B127B8A622B120F6721"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("103F90EE9DC52E5E7FB5132B7033C63066D194321491862059967C715985D473"),
		},
		{
			name: "RFC6979 A.2.5. ECDSA, 256 Bits (Prime Field), SHA-256, message = \"sample\"",
			args: args{
				hash: crypto.SHA256,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P256(),
						X:     parseBigInt("60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6"),
						Y:     parseBigInt("7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299"),
					},
					D: parseBigInt("C9AFA9D845BA75166B5C215767B1D6934E50C3DB36E89B127B8A622B120F6721"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("A6E3C57DD01ABE90086538398355DD4C3B17AA873382B0F24D6129493D8AAD60"),
		},
		{
			name: "RFC6979 A.2.5. ECDSA, 256 Bits (Prime Field), SHA-384, message = \"sample\"",
			args: args{
				hash: crypto.SHA384,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P256(),
						X:     parseBigInt("60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6"),
						Y:     parseBigInt("7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299"),
					},
					D: parseBigInt("C9AFA9D845BA75166B5C215767B1D6934E50C3DB36E89B127B8A622B120F6721"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("09F634B188CEFD98E7EC88B1AA9852D734D0BC272F7D2A47DECC6EBEB375AAD4"),
		},
		{
			name: "RFC6979 A.2.5. ECDSA, 256 Bits (Prime Field), SHA-512, message = \"sample\"",
			args: args{
				hash: crypto.SHA512,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P256(),
						X:     parseBigInt("60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6"),
						Y:     parseBigInt("7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299"),
					},
					D: parseBigInt("C9AFA9D845BA75166B5C215767B1D6934E50C3DB36E89B127B8A622B120F6721"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("5FA81C63109BADB88C1F367B47DA606DA28CAD69AA22C4FE6AD7DF73A7173AA5"),
		},
		{
			name: "RFC6979 A.2.5. ECDSA, 256 Bits (Prime Field), SHA-1, message = \"test\"",
			args: args{
				hash: crypto.SHA1,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P256(),
						X:     parseBigInt("60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6"),
						Y:     parseBigInt("7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299"),
					},
					D: parseBigInt("C9AFA9D845BA75166B5C215767B1D6934E50C3DB36E89B127B8A622B120F6721"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("8C9520267C55D6B980DF741E56B4ADEE114D84FBFA2E62137954164028632A2E"),
		},
		{
			name: "RFC6979 A.2.5. ECDSA, 256 Bits (Prime Field), SHA-224, message = \"test\"",
			args: args{
				hash: crypto.SHA224,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P256(),
						X:     parseBigInt("60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6"),
						Y:     parseBigInt("7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299"),
					},
					D: parseBigInt("C9AFA9D845BA75166B5C215767B1D6934E50C3DB36E89B127B8A622B120F6721"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("669F4426F2688B8BE0DB3A6BD1989BDAEFFF84B649EEB84F3DD26080F667FAA7"),
		},
		{
			name: "RFC6979 A.2.5. ECDSA, 256 Bits (Prime Field), SHA-256, message = \"test\"",
			args: args{
				hash: crypto.SHA256,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P256(),
						X:     parseBigInt("60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6"),
						Y:     parseBigInt("7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299"),
					},
					D: parseBigInt("C9AFA9D845BA75166B5C215767B1D6934E50C3DB36E89B127B8A622B120F6721"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("D16B6AE827F17175E040871A1C7EC3500192C4C92677336EC2537ACAEE0008E0"),
		},
		{
			name: "RFC6979 A.2.5. ECDSA, 256 Bits (Prime Field), SHA-384, message = \"test\"",
			args: args{
				hash: crypto.SHA384,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P256(),
						X:     parseBigInt("60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6"),
						Y:     parseBigInt("7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299"),
					},
					D: parseBigInt("C9AFA9D845BA75166B5C215767B1D6934E50C3DB36E89B127B8A622B120F6721"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("16AEFFA357260B04B1DD199693960740066C1A8F3E8EDD79070AA914D361B3B8"),
		},
		{
			name: "RFC6979 A.2.5. ECDSA, 256 Bits (Prime Field), SHA-512, message = \"test\"",
			args: args{
				hash: crypto.SHA512,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P256(),
						X:     parseBigInt("60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6"),
						Y:     parseBigInt("7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299"),
					},
					D: parseBigInt("C9AFA9D845BA75166B5C215767B1D6934E50C3DB36E89B127B8A622B120F6721"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("6915D11632ACA3C40D5D51C08DAF9C555933819548784480E93499000D9F0B7F"),
		},
		// A.2.6. ECDSA, 384 Bits (Prime Field)
		{
			name: "RFC6979 A.2.6. ECDSA, 384 Bits (Prime Field), SHA-1, message = \"sample\"",
			args: args{
				hash: crypto.SHA1,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P384(),
						X:     parseBigInt("EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64DEF8F0EA9055866064A254515480BC13"),
						Y:     parseBigInt("8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1288B231C3AE0D4FE7344FD2533264720"),
					},
					D: parseBigInt("6B9D3DAD2E1B8C1C05B19875B6659F4DE23C3B667BF297BA9AA47740787137D896D5724E4C70A825F872C9EA60D2EDF5"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("4471EF7518BB2C7C20F62EAE1C387AD0C5E8E470995DB4ACF694466E6AB096630F29E5938D25106C3C340045A2DB01A7"),
		},
		{
			name: "RFC6979 A.2.6. ECDSA, 384 Bits (Prime Field), SHA-224, message = \"sample\"",
			args: args{
				hash: crypto.SHA224,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P384(),
						X:     parseBigInt("EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64DEF8F0EA9055866064A254515480BC13"),
						Y:     parseBigInt("8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1288B231C3AE0D4FE7344FD2533264720"),
					},
					D: parseBigInt("6B9D3DAD2E1B8C1C05B19875B6659F4DE23C3B667BF297BA9AA47740787137D896D5724E4C70A825F872C9EA60D2EDF5"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("A4E4D2F0E729EB786B31FC20AD5D849E304450E0AE8E3E341134A5C1AFA03CAB8083EE4E3C45B06A5899EA56C51B5879"),
		},
		{
			name: "RFC6979 A.2.6. ECDSA, 384 Bits (Prime Field), SHA-256, message = \"sample\"",
			args: args{
				hash: crypto.SHA256,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P384(),
						X:     parseBigInt("EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64DEF8F0EA9055866064A254515480BC13"),
						Y:     parseBigInt("8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1288B231C3AE0D4FE7344FD2533264720"),
					},
					D: parseBigInt("6B9D3DAD2E1B8C1C05B19875B6659F4DE23C3B667BF297BA9AA47740787137D896D5724E4C70A825F872C9EA60D2EDF5"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("180AE9F9AEC5438A44BC159A1FCB277C7BE54FA20E7CF404B490650A8ACC414E375572342863C899F9F2EDF9747A9B60"),
		},
		{
			name: "RFC6979 A.2.6. ECDSA, 384 Bits (Prime Field), SHA-384, message = \"sample\"",
			args: args{
				hash: crypto.SHA384,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P384(),
						X:     parseBigInt("EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64DEF8F0EA9055866064A254515480BC13"),
						Y:     parseBigInt("8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1288B231C3AE0D4FE7344FD2533264720"),
					},
					D: parseBigInt("6B9D3DAD2E1B8C1C05B19875B6659F4DE23C3B667BF297BA9AA47740787137D896D5724E4C70A825F872C9EA60D2EDF5"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("94ED910D1A099DAD3254E9242AE85ABDE4BA15168EAF0CA87A555FD56D10FBCA2907E3E83BA95368623B8C4686915CF9"),
		},
		{
			name: "RFC6979 A.2.6. ECDSA, 384 Bits (Prime Field), SHA-512, message = \"sample\"",
			args: args{
				hash: crypto.SHA512,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P384(),
						X:     parseBigInt("EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64DEF8F0EA9055866064A254515480BC13"),
						Y:     parseBigInt("8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1288B231C3AE0D4FE7344FD2533264720"),
					},
					D: parseBigInt("6B9D3DAD2E1B8C1C05B19875B6659F4DE23C3B667BF297BA9AA47740787137D896D5724E4C70A825F872C9EA60D2EDF5"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("92FC3C7183A883E24216D1141F1A8976C5B0DD797DFA597E3D7B32198BD35331A4E966532593A52980D0E3AAA5E10EC3"),
		},
		{
			name: "RFC6979 A.2.6. ECDSA, 384 Bits (Prime Field), SHA-1, message = \"test\"",
			args: args{
				hash: crypto.SHA1,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P384(),
						X:     parseBigInt("EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64DEF8F0EA9055866064A254515480BC13"),
						Y:     parseBigInt("8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1288B231C3AE0D4FE7344FD2533264720"),
					},
					D: parseBigInt("6B9D3DAD2E1B8C1C05B19875B6659F4DE23C3B667BF297BA9AA47740787137D896D5724E4C70A825F872C9EA60D2EDF5"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("66CC2C8F4D303FC962E5FF6A27BD79F84EC812DDAE58CF5243B64A4AD8094D47EC3727F3A3C186C15054492E30698497"),
		},
		{
			name: "RFC6979 A.2.6. ECDSA, 384 Bits (Prime Field), SHA-224, message = \"test\"",
			args: args{
				hash: crypto.SHA224,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P384(),
						X:     parseBigInt("EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64DEF8F0EA9055866064A254515480BC13"),
						Y:     parseBigInt("8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1288B231C3AE0D4FE7344FD2533264720"),
					},
					D: parseBigInt("6B9D3DAD2E1B8C1C05B19875B6659F4DE23C3B667BF297BA9AA47740787137D896D5724E4C70A825F872C9EA60D2EDF5"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("18FA39DB95AA5F561F30FA3591DC59C0FA3653A80DAFFA0B48D1A4C6DFCBFF6E3D33BE4DC5EB8886A8ECD093F2935726"),
		},
		{
			name: "RFC6979 A.2.6. ECDSA, 384 Bits (Prime Field), SHA-256, message = \"test\"",
			args: args{
				hash: crypto.SHA256,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P384(),
						X:     parseBigInt("EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64DEF8F0EA9055866064A254515480BC13"),
						Y:     parseBigInt("8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1288B231C3AE0D4FE7344FD2533264720"),
					},
					D: parseBigInt("6B9D3DAD2E1B8C1C05B19875B6659F4DE23C3B667BF297BA9AA47740787137D896D5724E4C70A825F872C9EA60D2EDF5"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("0CFAC37587532347DC3389FDC98286BBA8C73807285B184C83E62E26C401C0FAA48DD070BA79921A3457ABFF2D630AD7"),
		},
		{
			name: "RFC6979 A.2.6. ECDSA, 384 Bits (Prime Field), SHA-384, message = \"test\"",
			args: args{
				hash: crypto.SHA384,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P384(),
						X:     parseBigInt("EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64DEF8F0EA9055866064A254515480BC13"),
						Y:     parseBigInt("8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1288B231C3AE0D4FE7344FD2533264720"),
					},
					D: parseBigInt("6B9D3DAD2E1B8C1C05B19875B6659F4DE23C3B667BF297BA9AA47740787137D896D5724E4C70A825F872C9EA60D2EDF5"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("015EE46A5BF88773ED9123A5AB0807962D193719503C527B031B4C2D225092ADA71F4A459BC0DA98ADB95837DB8312EA"),
		},
		{
			name: "RFC6979 A.2.6. ECDSA, 384 Bits (Prime Field), SHA-512, message = \"test\"",
			args: args{
				hash: crypto.SHA512,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P384(),
						X:     parseBigInt("EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64DEF8F0EA9055866064A254515480BC13"),
						Y:     parseBigInt("8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1288B231C3AE0D4FE7344FD2533264720"),
					},
					D: parseBigInt("6B9D3DAD2E1B8C1C05B19875B6659F4DE23C3B667BF297BA9AA47740787137D896D5724E4C70A825F872C9EA60D2EDF5"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("3780C4F67CB15518B6ACAE34C9F83568D2E12E47DEAB6C50A4E4EE5319D1E8CE0E2CC8A136036DC4B9C00E6888F66B6C"),
		},
		// A.2.7. ECDSA, 521 Bits (Prime Field)
		{
			name: "RFC6979 A.2.7. ECDSA, 521 Bits (Prime Field), SHA-1, message = \"sample\"",
			args: args{
				hash: crypto.SHA1,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P521(),
						X:     parseBigInt("1894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD371123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F5023A4"),
						Y:     parseBigInt("0493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A28A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDFCF5"),
					},
					D: parseBigInt("0FAD06DAA62BA3B25D2FB40133DA757205DE67F5BB0018FEE8C86E1B68C7E75CAA896EB32F1F47C70855836A6D16FCC1466F6D8FBEC67DB89EC0C08B0E996B83538"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("089C071B419E1C2820962321787258469511958E80582E95D8378E0C2CCDB3CB42BEDE42F50E3FA3C71F5A76724281D31D9C89F0F91FC1BE4918DB1C03A5838D0F9"),
		},
		{
			name: "RFC6979 A.2.7. ECDSA, 521 Bits (Prime Field), SHA-224, message = \"sample\"",
			args: args{
				hash: crypto.SHA224,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P521(),
						X:     parseBigInt("1894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD371123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F5023A4"),
						Y:     parseBigInt("0493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A28A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDFCF5"),
					},
					D: parseBigInt("0FAD06DAA62BA3B25D2FB40133DA757205DE67F5BB0018FEE8C86E1B68C7E75CAA896EB32F1F47C70855836A6D16FCC1466F6D8FBEC67DB89EC0C08B0E996B83538"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("121415EC2CD7726330A61F7F3FA5DE14BE9436019C4DB8CB4041F3B54CF31BE0493EE3F427FB906393D895A19C9523F3A1D54BB8702BD4AA9C99DAB2597B92113F3"),
		},
		{
			name: "RFC6979 A.2.7. ECDSA, 521 Bits (Prime Field), SHA-256, message = \"sample\"",
			args: args{
				hash: crypto.SHA256,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P521(),
						X:     parseBigInt("1894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD371123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F5023A4"),
						Y:     parseBigInt("0493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A28A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDFCF5"),
					},
					D: parseBigInt("0FAD06DAA62BA3B25D2FB40133DA757205DE67F5BB0018FEE8C86E1B68C7E75CAA896EB32F1F47C70855836A6D16FCC1466F6D8FBEC67DB89EC0C08B0E996B83538"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("0EDF38AFCAAECAB4383358B34D67C9F2216C8382AAEA44A3DAD5FDC9C32575761793FEF24EB0FC276DFC4F6E3EC476752F043CF01415387470BCBD8678ED2C7E1A0"),
		},
		{
			name: "RFC6979 A.2.7. ECDSA, 521 Bits (Prime Field), SHA-384, message = \"sample\"",
			args: args{
				hash: crypto.SHA384,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P521(),
						X:     parseBigInt("1894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD371123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F5023A4"),
						Y:     parseBigInt("0493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A28A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDFCF5"),
					},
					D: parseBigInt("0FAD06DAA62BA3B25D2FB40133DA757205DE67F5BB0018FEE8C86E1B68C7E75CAA896EB32F1F47C70855836A6D16FCC1466F6D8FBEC67DB89EC0C08B0E996B83538"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("1546A108BC23A15D6F21872F7DED661FA8431DDBD922D0DCDB77CC878C8553FFAD064C95A920A750AC9137E527390D2D92F153E66196966EA554D9ADFCB109C4211"),
		},
		{
			name: "RFC6979 A.2.7. ECDSA, 521 Bits (Prime Field), SHA-512, message = \"sample\"",
			args: args{
				hash: crypto.SHA512,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P521(),
						X:     parseBigInt("1894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD371123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F5023A4"),
						Y:     parseBigInt("0493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A28A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDFCF5"),
					},
					D: parseBigInt("0FAD06DAA62BA3B25D2FB40133DA757205DE67F5BB0018FEE8C86E1B68C7E75CAA896EB32F1F47C70855836A6D16FCC1466F6D8FBEC67DB89EC0C08B0E996B83538"),
				},
				signedData: []byte("sample"),
			},
			want: parseBigInt("1DAE2EA071F8110DC26882D4D5EAE0621A3256FC8847FB9022E2B7D28E6F10198B1574FDD03A9053C08A1854A168AA5A57470EC97DD5CE090124EF52A2F7ECBFFD3"),
		},
		{
			name: "RFC6979 A.2.7. ECDSA, 521 Bits (Prime Field), SHA-1, message = \"test\"",
			args: args{
				hash: crypto.SHA1,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P521(),
						X:     parseBigInt("1894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD371123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F5023A4"),
						Y:     parseBigInt("0493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A28A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDFCF5"),
					},
					D: parseBigInt("0FAD06DAA62BA3B25D2FB40133DA757205DE67F5BB0018FEE8C86E1B68C7E75CAA896EB32F1F47C70855836A6D16FCC1466F6D8FBEC67DB89EC0C08B0E996B83538"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("0BB9F2BF4FE1038CCF4DABD7139A56F6FD8BB1386561BD3C6A4FC818B20DF5DDBA80795A947107A1AB9D12DAA615B1ADE4F7A9DC05E8E6311150F47F5C57CE8B222"),
		},
		{
			name: "RFC6979 A.2.7. ECDSA, 521 Bits (Prime Field), SHA-224, message = \"test\"",
			args: args{
				hash: crypto.SHA224,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P521(),
						X:     parseBigInt("1894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD371123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F5023A4"),
						Y:     parseBigInt("0493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A28A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDFCF5"),
					},
					D: parseBigInt("0FAD06DAA62BA3B25D2FB40133DA757205DE67F5BB0018FEE8C86E1B68C7E75CAA896EB32F1F47C70855836A6D16FCC1466F6D8FBEC67DB89EC0C08B0E996B83538"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("040D09FCF3C8A5F62CF4FB223CBBB2B9937F6B0577C27020A99602C25A01136987E452988781484EDBBCF1C47E554E7FC901BC3085E5206D9F619CFF07E73D6F706"),
		},
		{
			name: "RFC6979 A.2.7. ECDSA, 521 Bits (Prime Field), SHA-256, message = \"test\"",
			args: args{
				hash: crypto.SHA256,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P521(),
						X:     parseBigInt("1894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD371123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F5023A4"),
						Y:     parseBigInt("0493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A28A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDFCF5"),
					},
					D: parseBigInt("0FAD06DAA62BA3B25D2FB40133DA757205DE67F5BB0018FEE8C86E1B68C7E75CAA896EB32F1F47C70855836A6D16FCC1466F6D8FBEC67DB89EC0C08B0E996B83538"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("01DE74955EFAABC4C4F17F8E84D881D1310B5392D7700275F82F145C61E843841AF09035BF7A6210F5A431A6A9E81C9323354A9E69135D44EBD2FCAA7731B909258"),
		},
		{
			name: "RFC6979 A.2.7. ECDSA, 521 Bits (Prime Field), SHA-384, message = \"test\"",
			args: args{
				hash: crypto.SHA384,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P521(),
						X:     parseBigInt("1894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD371123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F5023A4"),
						Y:     parseBigInt("0493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A28A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDFCF5"),
					},
					D: parseBigInt("0FAD06DAA62BA3B25D2FB40133DA757205DE67F5BB0018FEE8C86E1B68C7E75CAA896EB32F1F47C70855836A6D16FCC1466F6D8FBEC67DB89EC0C08B0E996B83538"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("1F1FC4A349A7DA9A9E116BFDD055DC08E78252FF8E23AC276AC88B1770AE0B5DCEB1ED14A4916B769A523CE1E90BA22846AF11DF8B300C38818F713DADD85DE0C88"),
		},
		{
			name: "RFC6979 A.2.7. ECDSA, 521 Bits (Prime Field), SHA-512, message = \"test\"",
			args: args{
				hash: crypto.SHA512,
				privKey: &ecdsa.PrivateKey{
					PublicKey: ecdsa.PublicKey{
						Curve: elliptic.P521(),
						X:     parseBigInt("1894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD371123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F5023A4"),
						Y:     parseBigInt("0493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A28A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDFCF5"),
					},
					D: parseBigInt("0FAD06DAA62BA3B25D2FB40133DA757205DE67F5BB0018FEE8C86E1B68C7E75CAA896EB32F1F47C70855836A6D16FCC1466F6D8FBEC67DB89EC0C08B0E996B83538"),
				},
				signedData: []byte("test"),
			},
			want: parseBigInt("16200813020EC986863BEDFC1B121F605C1215645018AEA1A7B215A564DE9EB1B38A67AA1128B80CE391C4FB71187654AAA3431027BFC7F395766CA988C964DC56D"),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := rfc6979Ecdsa(tt.args.hash, tt.args.privKey, tt.args.signedData, false); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("rfc6979() = %v, want %v", got, tt.want)
			}
		})
	}
}
