// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gitlab

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// GetUsersResponse is returned by GetUsers on success.
type GetUsersResponse struct {
	// Find users.
	Users GetUsersUsersUserCoreConnection `json:"users"`
}

// GetUsers returns GetUsersResponse.Users, and is useful for accessing the field via an interface.
func (v *GetUsersResponse) GetUsers() GetUsersUsersUserCoreConnection { return v.Users }

// GetUsersUsersUserCoreConnection includes the requested fields of the GraphQL type UserCoreConnection.
// The GraphQL type's documentation follows.
//
// The connection type for UserCore.
type GetUsersUsersUserCoreConnection struct {
	// Information to aid in pagination.
	PageInfo GetUsersUsersUserCoreConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetUsersUsersUserCoreConnectionNodesUserCore `json:"nodes"`
}

// GetPageInfo returns GetUsersUsersUserCoreConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetUsersUsersUserCoreConnection) GetPageInfo() GetUsersUsersUserCoreConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetUsersUsersUserCoreConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetUsersUsersUserCoreConnection) GetNodes() []GetUsersUsersUserCoreConnectionNodesUserCore {
	return v.Nodes
}

// GetUsersUsersUserCoreConnectionNodesUserCore includes the requested fields of the GraphQL type UserCore.
// The GraphQL type's documentation follows.
//
// Core representation of a GitLab user.
type GetUsersUsersUserCoreConnectionNodesUserCore struct {
	// ID of the user.
	Id string `json:"id"`
	// Username of the user. Unique within this instance of GitLab.
	Username string `json:"username"`
	// State of the user.
	State UserState `json:"state"`
	// Timestamp of when the user was created.
	CreatedAt time.Time `json:"createdAt"`
	// Date the user last performed any actions.
	LastActivityOn time.Time `json:"-"`
}

// GetId returns GetUsersUsersUserCoreConnectionNodesUserCore.Id, and is useful for accessing the field via an interface.
func (v *GetUsersUsersUserCoreConnectionNodesUserCore) GetId() string { return v.Id }

// GetUsername returns GetUsersUsersUserCoreConnectionNodesUserCore.Username, and is useful for accessing the field via an interface.
func (v *GetUsersUsersUserCoreConnectionNodesUserCore) GetUsername() string { return v.Username }

// GetState returns GetUsersUsersUserCoreConnectionNodesUserCore.State, and is useful for accessing the field via an interface.
func (v *GetUsersUsersUserCoreConnectionNodesUserCore) GetState() UserState { return v.State }

// GetCreatedAt returns GetUsersUsersUserCoreConnectionNodesUserCore.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetUsersUsersUserCoreConnectionNodesUserCore) GetCreatedAt() time.Time { return v.CreatedAt }

// GetLastActivityOn returns GetUsersUsersUserCoreConnectionNodesUserCore.LastActivityOn, and is useful for accessing the field via an interface.
func (v *GetUsersUsersUserCoreConnectionNodesUserCore) GetLastActivityOn() time.Time {
	return v.LastActivityOn
}

func (v *GetUsersUsersUserCoreConnectionNodesUserCore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUsersUsersUserCoreConnectionNodesUserCore
		LastActivityOn json.RawMessage `json:"lastActivityOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUsersUsersUserCoreConnectionNodesUserCore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.LastActivityOn
		src := firstPass.LastActivityOn
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetUsersUsersUserCoreConnectionNodesUserCore.LastActivityOn: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetUsersUsersUserCoreConnectionNodesUserCore struct {
	Id string `json:"id"`

	Username string `json:"username"`

	State UserState `json:"state"`

	CreatedAt time.Time `json:"createdAt"`

	LastActivityOn json.RawMessage `json:"lastActivityOn"`
}

func (v *GetUsersUsersUserCoreConnectionNodesUserCore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUsersUsersUserCoreConnectionNodesUserCore) __premarshalJSON() (*__premarshalGetUsersUsersUserCoreConnectionNodesUserCore, error) {
	var retval __premarshalGetUsersUsersUserCoreConnectionNodesUserCore

	retval.Id = v.Id
	retval.Username = v.Username
	retval.State = v.State
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.LastActivityOn
		src := v.LastActivityOn
		var err error
		*dst, err = MarshalDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetUsersUsersUserCoreConnectionNodesUserCore.LastActivityOn: %w", err)
		}
	}
	return &retval, nil
}

// GetUsersUsersUserCoreConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type GetUsersUsersUserCoreConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns GetUsersUsersUserCoreConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetUsersUsersUserCoreConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// GetHasNextPage returns GetUsersUsersUserCoreConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetUsersUsersUserCoreConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// Common sort values
type Sort string

const (
	// Updated at descending order. Deprecated in GitLab 13.5: This was renamed.
	Sort_updated_desc Sort = "updated_desc"
	// Updated at ascending order. Deprecated in GitLab 13.5: This was renamed.
	Sort_updated_asc Sort = "updated_asc"
	// Created at descending order. Deprecated in GitLab 13.5: This was renamed.
	Sort_created_desc Sort = "created_desc"
	// Created at ascending order. Deprecated in GitLab 13.5: This was renamed.
	Sort_created_asc Sort = "created_asc"
	// Updated at descending order.
	Sort_UPDATED_DESC Sort = "UPDATED_DESC"
	// Updated at ascending order.
	Sort_UPDATED_ASC Sort = "UPDATED_ASC"
	// Created at descending order.
	Sort_CREATED_DESC Sort = "CREATED_DESC"
	// Created at ascending order.
	Sort_CREATED_ASC Sort = "CREATED_ASC"
)

// Possible states of a user
type UserState string

const (
	// User is active and can use the system.
	UserStateActive UserState = "active"
	// User has been blocked by an administrator and cannot use the system.
	UserStateBlocked UserState = "blocked"
	// User is no longer active and cannot use the system.
	UserStateDeactivated UserState = "deactivated"
	// User is blocked, and their contributions are hidden.
	UserStateBanned UserState = "banned"
	// User has been blocked by the system.
	UserStateLdapBlocked UserState = "ldap_blocked"
	// User is blocked and pending approval.
	UserStateBlockedPendingApproval UserState = "blocked_pending_approval"
)

// __GetUsersInput is used internally by genqlient
type __GetUsersInput struct {
	After string `json:"after"`
	Sort  Sort   `json:"sort"`
}

// GetAfter returns __GetUsersInput.After, and is useful for accessing the field via an interface.
func (v *__GetUsersInput) GetAfter() string { return v.After }

// GetSort returns __GetUsersInput.Sort, and is useful for accessing the field via an interface.
func (v *__GetUsersInput) GetSort() Sort { return v.Sort }

// The query or mutation executed by GetUsers.
const GetUsers_Operation = `
query GetUsers ($after: String, $sort: Sort!) {
	users(sort: $sort, first: 100, after: $after) {
		pageInfo {
			endCursor
			hasNextPage
		}
		nodes {
			id
			username
			state
			createdAt
			lastActivityOn
		}
	}
}
`

func GetUsers(
	ctx_ context.Context,
	client_ graphql.Client,
	after string,
	sort Sort,
) (*GetUsersResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetUsers",
		Query:  GetUsers_Operation,
		Variables: &__GetUsersInput{
			After: after,
			Sort:  sort,
		},
	}
	var err_ error

	var data_ GetUsersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
